import requests
from docx import Document

# --- 1. Fonctions pour g√©n√©rer les prompts ---

def formatter_formation(formation):
    return "\n".join(
        f"- {f['titre']} ‚Äì {f['etablissement']} ({f['periode']})\n  " +
        "\n  ".join(f['details']) for f in formation
    )

def formatter_experience(experience):
    return "\n".join(
        f"- {e['titre']} ‚Äì {e['entreprise']}, {e['lieu']} ({e['periode']})\n  " +
        "\n  ".join(e['details']) for e in experience
    )

def generer_prompt_pertinence(cv_dict, offre_dict):
    formations = formatter_formation(cv_dict["formation"])
    experiences = formatter_experience(cv_dict["experience"])
    competences = "\n- ".join(cv_dict["competences_techniques"])
    soft_skills = "\n- ".join(cv_dict["soft_skills"])
    langues = "\n- ".join(cv_dict["langues"])
    certifications = "\n- ".join(cv_dict["certifications"])

    cv_txt = f"""Nom : {cv_dict['prenom_nom']}
Email : {cv_dict['email']}
T√©l√©phone : {cv_dict['telephone']}

Formation :
{formations}

Exp√©riences :
{experiences}

Comp√©tences techniques :
- {competences}

Soft skills :
- {soft_skills}

Langues :
- {langues}

Certifications :
- {certifications}
"""

    offre_txt = f"""Titre : {offre_dict['titre']}
Entreprise : {offre_dict['entreprise']}
Lieu : {offre_dict['lieu']}
Contrat : {offre_dict['type_contrat']}

Description de l‚Äôentreprise :
{offre_dict['description_entreprise']}

Missions :
{offre_dict['missions']}

Profil recherch√© :
{offre_dict['profil_recherche']}
"""

    return f"""
Tu es un expert RH.

Voici un CV et une offre d'emploi. R√©ponds uniquement par "oui" si le profil correspond √† plus de 70 % √† l'offre, sinon r√©ponds "non". Ne donne aucune explication.

--- CV ---
{cv_txt}

--- Offre ---
{offre_txt}
"""

def generer_prompt_lettre(cv_dict, offre_dict):
    formations = formatter_formation(cv_dict["formation"])
    experiences = formatter_experience(cv_dict["experience"])
    competences = ", ".join(cv_dict["competences_techniques"])
    soft_skills = ", ".join(cv_dict["soft_skills"])
    langues = ", ".join(cv_dict["langues"])
    certifications = ", ".join(cv_dict["certifications"])

    return f"""
Tu es un expert RH et sp√©cialiste de la r√©daction de lettres de motivation professionnelles. R√©dige une lettre compl√®te, pr√™te √† √™tre envoy√©e, en t‚Äôappuyant sur le CV du candidat et l‚Äôoffre d‚Äôemploi ci-dessous.

üéØ Objectif :
Fournir une lettre claire, convaincante, personnalis√©e, sans faute ni besoin de correction, dans un style fluide, professionnel et humain.

‚úÖ La lettre doit imp√©rativement :
- Tenir sur une page (Word A4) avec un style direct et efficace.
- Suivre ce plan structur√© :
    1. Pr√©sentation br√®ve du candidat et de son parcours
    2. Motivation sinc√®re et coh√©rente pour le poste
    3. Mise en lien entre l‚Äôentreprise/l‚Äôoffre et les valeurs du candidat
    4. Mise en avant cibl√©e des comp√©tences, exp√©riences ou cours suivis correspondant aux missions
    5. Remerciements, disponibilit√© pour un entretien, et formule de politesse

‚úçÔ∏è Style :
- Z√©ro faute d‚Äôorthographe ou de grammaire.
- Chaque phrase commence par une majuscule.
- Aucune formule g√©n√©rique ni tournure artificielle.
- Le ton doit √™tre confiant, positif, professionnel et chaleureux.
- Ne propose aucun espace √† compl√©ter : tout doit √™tre finalis√©.

üìé Contexte fourni :

--- CV ---
Nom : {cv_dict['prenom_nom']}
Email : {cv_dict['email']}
T√©l√©phone : {cv_dict['telephone']}
LinkedIn : {cv_dict['linkedin']}
GitHub : {cv_dict['github']}

Formation :
{formations}

Exp√©riences :
{experiences}

Comp√©tences techniques : {competences}
Comp√©tences comportementales (soft skills) : {soft_skills}
Langues : {langues}
Certifications : {certifications}

--- Offre ---
Titre : {offre_dict['titre']}
Entreprise : {offre_dict['entreprise']}
Lieu : {offre_dict['lieu']}
Type de contrat : {offre_dict['type_contrat']}
√Ä propos de l‚Äôentreprise :
{offre_dict['description_entreprise']}

Missions propos√©es :
{offre_dict['missions']}

Profil recherch√© :
{offre_dict['profil_recherche']}
"""

# --- 2. CV d'exemple ---
cv_dict = {
    "prenom_nom": "Eleonore VERNE",
    "email": "eleonore.verne@marine-analytics.com",
    "telephone": "+377 98 76 54 32",
    "linkedin": "eleonore-verne",
    "github": "eleonoreverne",
    "competences_techniques": ["Python", "R", "Tableau", "SQL", "MATLAB", "Azure"],
    "soft_skills": ["Leadership", "Innovation", "R√©solution de probl√®mes", "Communication"],
    "langues": ["Fran√ßais (Natif)", "Anglais (C1)", "Espagnol (B2)", "Japonais (B1)"],
    "certifications": ["Yacht Master", "Data Science Professional (DSP-M278X93)"],
    "formation": [
        {
            "titre": "Master Intelligence Artificielle et Politiques Publiques",
            "etablissement": "Sciences Po Paris",
            "periode": "Sept. 2023 ‚Äì Juin 2025",
            "details": [
                "Principaux enseignements: Deep Learning, Gouvernance des donn√©es, √âthique de l‚ÄôIA, Politiques environnementales, Mod√©lisation pr√©dictive."
            ]
        },
        {
            "titre": "Licence Math√©matiques Appliqu√©es et Sciences Sociales",
            "etablissement": "Universit√© C√¥te d‚ÄôAzur",
            "periode": "Sept. 2020 ‚Äì Juin 2023",
            "details": [
                "Principaux enseignements: Statistiques avanc√©es, √âconom√©trie, Analyse de donn√©es, Optimisation, Simulation stochastique, Mod√©lisation.",
                "Mention: Tr√®s Bien"
            ]
        },
        {
            "titre": "Baccalaur√©at Scientifique International",
            "etablissement": "Lyc√©e Albert Premier",
            "periode": "Sept. 2017 ‚Äì Juillet 2020",
            "details": [
                "Sp√©cialit√©: Math√©matiques",
                "Option: Section Europ√©enne Anglais",
                "Mention: Tr√®s Bien avec F√©licitations du Jury"
            ]
        }
    ],
    "experience": [
        {
            "titre": "Data Scientist Junior",
            "entreprise": "Marine Analytics Monaco",
            "lieu": "Monaco",
            "periode": "Juin 2022 ‚Äì D√©c. 2022",
            "details": [
                "Conception et impl√©mentation d‚Äôalgorithmes d‚Äôanalyse pr√©dictive pour optimiser les trajets maritimes et r√©duire l‚Äôempreinte carbone des navires de luxe. D√©veloppement d‚Äôun tableau de bord interactif permettant le suivi en temps r√©el des performances et des √©conomies de carburant."
            ]
        },
        {
            "titre": "Stage en Data Analytics",
            "entreprise": "Azur Innovations",
            "lieu": "Nice, France",
            "periode": "Mai 2021 ‚Äì Ao√ªt 2021",
            "details": [
                "Analyse des donn√©es touristiques de la C√¥te d‚ÄôAzur pour identifier les tendances saisonni√®res et d√©velopper un mod√®le de pr√©vision de l‚Äôaffluence. Cr√©ation de visualisations interactives et participation √† l‚Äô√©laboration d‚Äôune strat√©gie de tourisme durable pour les municipalit√©s partenaires."
            ]
        }
    ]
}

# --- 3. Offres d'alternance exemple ---
liste_offres = [
    {
        "titre": "Alternante Data Analyst Junior",
        "entreprise": "NavOcean",
        "lieu": "Marseille",
        "type_contrat": "Alternance (12 mois)",
        "description_entreprise": "NavOcean d√©veloppe des solutions IA pour la logistique maritime durable.",
        "missions": "- Analyse des donn√©es environnementales maritimes\n- Cr√©ation de tableaux de bord avec Tableau/Power BI\n- Contribution aux mod√®les pr√©dictifs avec Python/R",
        "profil_recherche": "- √âtudiant(e) en Master IA ou Data Science\n- Bon niveau en Python ou R, visualisation et statistiques\n- Sensibilit√© aux enjeux maritimes ou climatiques"
    },
    {
        "titre": "Alternante Data Scientist Climat",
        "entreprise": "GreenForecast",
        "lieu": "Lyon",
        "type_contrat": "Alternance (12 mois)",
        "description_entreprise": "GreenForecast pr√©dit les impacts climatiques pour les grandes villes europ√©ennes.",
        "missions": "- Traitement de donn√©es satellites\n- Mod√©lisation pr√©dictive avec Python\n- Veille scientifique sur l'adaptation climatique",
        "profil_recherche": "- Solides comp√©tences Python, Machine Learning, climat\n- Sensibilit√© environnementale"
    }
]

# --- 4. Envoi √† l'API Gemini ---
api_key = "Votre cl√© API"  # Remplace par ta vraie cl√©
url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent"
headers = {"Content-Type": "application/json"}
params = {"key": api_key}

def interroger_gemini(prompt):
    data = {
        "contents": [
            {
                "role": "user",
                "parts": [{"text": prompt}]
            }
        ]
    }
    response = requests.post(url, headers=headers, params=params, json=data)
    if response.status_code == 200:
        resultat = response.json()
        return resultat['candidates'][0]['content']['parts'][0]['text'].strip()
    else:
        print(f"\n‚ùå Erreur Gemini : {response.status_code}")
        print(response.text)
        return None

# --- 5. Traitement ---
for offre in liste_offres:
    print(f"\nüîç Traitement de l'offre chez {offre['entreprise']}...")
    prompt_pertinence = generer_prompt_pertinence(cv_dict, offre)
    reponse = interroger_gemini(prompt_pertinence)

    if reponse and reponse.lower() == "oui":
        print("‚úÖ Profil pertinent. G√©n√©ration de la lettre...")
        prompt_lettre = generer_prompt_lettre(cv_dict, offre)
        lettre = interroger_gemini(prompt_lettre)

        if lettre:
            doc = Document()
            doc.add_heading(f"Lettre de motivation ‚Äì {cv_dict['prenom_nom']}", 0)
            for ligne in lettre.split('\n'):
                if ligne.strip():
                    doc.add_paragraph(ligne)

            nom_fichier = f"Lettre_{cv_dict['prenom_nom'].replace(' ', '_')}_{offre['entreprise'].replace(' ', '_')}.docx"
            doc.save(nom_fichier)
            print(f"üìÑ Lettre sauvegard√©e dans : {nom_fichier}")
        else:
            print("‚ö†Ô∏è Erreur lors de la g√©n√©ration de la lettre.")
    else:
        print("‚õî Profil non jug√© pertinent.")

